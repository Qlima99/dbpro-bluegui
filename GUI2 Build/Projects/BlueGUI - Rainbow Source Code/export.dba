

`Produdces DarkBASIC Professional-compatible GUI code
function exportCodeDB(fileName as string)
   local fileNum=1
   local readStr as string
   local parent as string
   local lastParent as string
   local gtext as string
   local clipboardOnly
   local copyToClipboard
   
   if left$(fileName,1)="?"
  		clipboardOnly=1
  		fileName=right$(fileName,len(fileName)-1)
   endif
   
   `Open file
   if file exist(fileName) then delete file fileName

   open to write fileNum,fileName

   `Write Header
   write string fileNum,"`User Interface Setup Code"
 `  write string fileNum,"`Generated by Rainbow version " + RAINBOW_VERSION
   write string fileNum,"`==========================================="
   write string fileNum,"`Call createUI() to setup the user interface"
   write string fileNum,"`-------------------------------------------"

   `Write Declarations
   write string fileNum,""
   write string fileNum,"`Global Variable Declarations for Gadgets"
   write string fileNum,"`----------------------------------------"

   for i=1 to MAX_GADGETS
      if gadgets(i).handle <> 0
         write string fileNum,"global " + gadgets(i).name
      endif
   next i

   exportWriteMenuGlobalsDB(fileNum)
   
   `Write Function Header
   write string fileNum,""
   write string fileNum,"`Create User Interface"
   write string fileNum,"`---------------------"
   write string fileNum,"function createUI()"
   write string fileNum,SPACETAB+"If Not GUI_CONSTANTS Then errorMessage "+QUOTE_CHAR+"GUI Constants not defined.  Please include gui.dba when you compile"+QUOTE_CHAR+" : end"
   write string fileNum,SPACETAB+""

   `Write Creation Code
   
   tvItem=mainEditWin_TVHandle

   repeat
      tvItem=getNextGadget(tvItem)
      i=indexFromTVHandle(tvItem)
      
      if gadgets(i).handle <> 0
         `Get basic gadget properties
         handle=gadgets(i).handle

         x=gadgetX(handle)
         y=gadgetY(handle)
         width=gadgetWidth(handle)
         height=gadgetHeight(handle)
         gtext=getGadgetText(handle)

         parent=gadgets(getGadgetData(gadgets(i).parent)).name
         if len(parent)=0 then parent = "0"
         
         if parent <> lastParent
         		`Add an empty line for readability
         		write string fileNum,SPACETAB
         endif

        `  message parent

         `Write the line out to the file
         exportWriteLineDB(fileNum,i,str$(x),str$(y),str$(width),str$(height),parent,gtext)
         
         `Write out additional options
         exportWriteBorderStyleDB(fileNum,i)
         exportWriteEnableDB(fileNum,i)
         exportWriteVisibleDB(fileNum,i)
         exportWriteAlignDB(fileNum,i)
         
         lastParent=parent
      endif
   until tvItem=0

   `Write Code To Add Items
   write string fileNum,SPACETAB
   write string fileNum,SPACETAB
   exportItemsDB(fileNum)
   
   `Write Function Tail
   write string fileNum,SPACETAB+""
   write string fileNum,"endfunction"
   
   write string fileNum,""
   write string fileNum,"`Create Main Menu"
   write string fileNum,"`----------------"
   write string fileNum,"function createMainMenu()"
   
   exportWriteMenuDB(fileNum)
   
   write string fileNum,"endfunction"

   `Close file
   close file fileNum

	
   if (Not clipboardOnly)	
   	if (questionMessage("Code Export Complete.  Do you wish to copy the exported code to the clipboard?","Export Complete"))
   		copyToClipboard=1    
   	endif
   else
   	copyToClipboard=1
   endif		
   
   if copyToClipboard
   	open to read fileNum,fileName
       repeat
          read string fileNum,temp$
          readStr=readStr+chr$(13)+chr$(10)+temp$
       until file end(fileNum)
       close file fileNum

       `message readStr
       write to clipboard readStr
      `execute file "notepad.exe",fileName,"C:\"
   endif

endfunction

function exportWriteEnableDB(fileNum,index)
	if gadgets(index).startEnabled=0
		write string fileNum,SPACETAB+"setGadgetEnabled " + gadgets(index).name + ",0"
	endif
endfunction

function exportWriteVisibleDB(fileNum,index)
	if gadgets(index).startVisible=0
		write string fileNum,SPACETAB+"setGadgetVisible " + gadgets(index).name + ",0"
	endif
endfunction

function exportWriteAlignDB(fileNum,index)
	if gadgets(index).align <> ALIGN_NONE
		`TODO - Replace so it writes out the constants instead?
		write string fileNum,SPACETAB+"setGadgetAlign "+ gadgets(index).name +","+str$(gadgets(index).align)
	endif
endfunction

function exportWriteBorderStyleDB(fileNum,index)
     if (gadgets(index).hasBorder) and (gadgets(index).border <> BORDER_NONE)
          write string fileNum,SPACETAB+"setPanelBorderStyle " + gadgets(index).name +","+str$(gadgets(index).border)    
     endif
endfunction

function exportWriteLineDB(fileNum,index,x as string,y as string ,width as string,height as string,parent as string,gtext as string)
   local lineText as string

   gtype=gadgets(index).gtype

   select gtype
      case GADGET_BUTTON
         lineText=exportWriteButtonDB(index,x,y,width,height,parent,gtext)
      endcase
      case GADGET_LABEL
         lineText=exportWriteLabelDB(index,x,y,width,height,parent,gtext)
      endcase
      case GADGET_EDIT
         lineText=exportWriteEditDB(index,x,y,width,height,parent)
      endcase
      case GADGET_PANEL
         lineText=exportWritePanelDB(index,x,y,width,height,parent)
      endcase
      case GADGET_COMBO
         lineText=exportWriteComboDB(index,x,y,width,height,parent)
      endcase
      case GADGET_LIST
         lineText=exportWriteListDB(index,x,y,width,height,parent)
      endcase
      case GADGET_FRAME
         lineText=exportWriteFrameDB(index,x,y,width,height,parent,gtext)
      endcase
      case GADGET_RADIO
         lineText=exportWriteRadioDB(index,x,y,width,height,parent,gtext)
      endcase
      case GADGET_CHECK
         lineText=exportWriteCheckDB(index,x,y,width,height,parent,gtext)
      endcase
      case GADGET_TABS
         lineText=exportWriteTabsDB(index,x,y,width,height,parent)
      endcase
      case GADGET_WIN
         lineText=exportWriteWinDB(index,x,y,width,height,parent,gtext)
      endcase
      case GADGET_TREEVW
         lineText=exportWriteTreeVwDB(index,x,y,width,height,parent)
      endcase
      case GADGET_CANVAS
         lineText=exportWriteCanvasDB(index,x,y,width,height,parent)
      endcase
      case GADGET_SCROLL
         lineText=exportWriteScrollDB(index,x,y,width,height,parent)
      endcase
      case GADGET_UPDWN
         lineText=exportWriteUpDwnDB(index,x,y,width,height,parent)
      endcase
      case GADGET_TOOLB
      	lineText=exportWriteToolbarDB(index,parent)
      endcase
      case GADGET_LISTVW
      	lineText=exportWriteListViewDB(index,x,y,width,height,parent)
      endcase
      case GADGET_PROG
      	lineText=exportWriteProgressBarDB(index,x,y,width,height,parent)
      endcase
      case GADGET_TRACK
      	lineText=exportWriteTrackBarDB(index,x,y,width,height,parent)
      endcase
      case GADGET_STATUS
      	lineText=exportWriteStatusBarDB(index,parent)
      endcase
   endselect

   write string fileNum,SPACETAB+lineText
endfunction


function exportWriteButtonDB(index,x as string,y as string,width as string,height as string,parent as string, gtext as string)
   local result as string

   result = gadgets(index).name + "=createButton("+x+","+y+","+width+","+height+","+quote(gtext)+",0,"+parent+")"

endfunction result

function exportWritePanelDB(index,x as string,y as string,width as string,height as string,parent as string)
   local result as string
   result = gadgets(index).name + "=createPanel("+x+","+y+","+width+","+height+","+parent+")"
endfunction result

function exportWriteEditDB(index,x as string,y as string,width as string,height as string,parent as string)
   local result as string
   result = gadgets(index).name + "=createEdit("+x+","+y+","+width+","+height+",0,"+parent+")"
endfunction result

function exportWriteRadioDB(index,x as string,y as string,width as string,height as string,parent as string, gtext as string)
   local result as string
   result = gadgets(index).name + "=createRadioButton("+x+","+y+","+width+","+height+","+quote(gtext)+","+parent+")"
endfunction result

function exportWriteCheckDB(index,x as string,y as string,width as string,height as string,parent as string, gtext as string)
   local result as string
   result = gadgets(index).name + "=createCheckBox("+x+","+y+","+width+","+height+","+quote(gtext)+","+parent+")"
endfunction result

function exportWriteLabelDB(index,x as string,y as string,width as string,height as string,parent as string, gtext as string)
   local result as string
   result = gadgets(index).name + "=createLabel("+x+","+y+","+width+","+height+","+quote(gtext)+","+parent+")"
endfunction result

function exportWriteTabsDB(index,x as string,y as string,width as string,height as string,parent as string)
   local result as string
   result = gadgets(index).name + "=createTabs("+x+","+y+","+width+","+height+","+parent+")"
endfunction result

function exportWriteComboDB(index,x as string,y as string,width as string,height as string,parent as string)
   local result as string
   `Comboboxes must have a min height
   if val(height) < 100 then height="100"
   result = gadgets(index).name + "=createComboBox("+x+","+y+","+width+","+height+","+parent+")"
endfunction result

function exportWriteListDB(index,x as string,y as string,width as string,height as string,parent as string)
   local result as string
   result = gadgets(index).name + "=createListBox("+x+","+y+","+width+","+height+","+parent+")"
endfunction result

function exportWriteTreeVwDB(index,x as string,y as string,width as string,height as string,parent as string)
   local result as string
   result = gadgets(index).name + "=createTreeView("+x+","+y+","+width+","+height+","+parent+")"
endfunction result

function exportWriteCanvasDB(index,x as string,y as string,width as string,height as string,parent as string)
   local result as string
   result = gadgets(index).name + "=createCanvas("+x+","+y+","+width+","+height+","+parent+")"
endfunction result

function exportWriteUpDwnDB(index,x as string,y as string,width as string,height as string,parent as string)
   local result as string
   local style as string
   style=str$(gadgets(index).style)
   result = gadgets(index).name + "=createUpDown("+x+","+y+","+width+","+height+",0,"+style+","+parent+")"
endfunction result

function exportWriteScrollDB(index,x as string,y as string,width as string,height as string,parent as string)
   local result as string
    local style as string
   style=str$(gadgets(index).style)
   result = gadgets(index).name + "=createScrollbar("+x+","+y+","+width+","+height+","+style+","+parent+")"
endfunction result

function exportWriteFrameDB(index,x as string,y as string,width as string,height as string,parent as string, gtext as string)
   local result as string
   result = gadgets(index).name + "=createFrame("+x+","+y+","+width+","+height+","+quote(gtext)+","+parent+")"
endfunction result

function exportWriteWinDB(index,x as string,y as string,width as string,height as string,parent as string, gtext as string)
   local result as string
   local winBorderStr as string
   local winBorderExStr as string
   
   winBorderExStr="0"
   
   select gadgets(index).windowBorder
   	case WINBORDER_NORMAL
   		winBorderStr="WINDOW"+"_NORMAL"
   	endcase	
   	case WINBORDER_FIXED
   		winBorderStr="WINDOW"+"_FIXED"
   	endcase
   	case WINBORDER_NORMAL_TOOL
   		winBorderExStr="WINDOW"+"_TOOLWINDOW"
   		winBorderStr="WINDOW"+"_NORMAL"
   	endcase
   	case WINBORDER_FIXED_TOOL
   		winBorderExStr="WINDOW"+"_TOOLWINDOW"
   		winBorderStr="WINDOW"+"_FIXED"
   	endcase
   endselect
   
   result = gadgets(index).name + "=createWindow("+x+","+y+","+width+","+height+","+quote(gtext)+","+winBorderStr+","+winBorderExStr+",0,"+parent+")"
endfunction result

function exportWriteToolbarDB(index,parent as string)
	local result as string
	result = gadgets(index).name + "=createToolbar("+parent+")"
endfunction result

function exportWriteListViewDB(index,x as string,y as string,width as string,height as string,parent as string)
   local result as string
   result = gadgets(index).name + "=createListView("+x+","+y+","+width+","+height+","+parent+")"
endfunction result

function exportWriteStatusBarDB(index,parent as string)
	local result as string
	result = gadgets(index).name + "=createStatusBar("+parent+")"
endfunction result

function exportWriteProgressBarDB(index,x as string,y as string,width as string,height as string,parent as string)
   local result as string
   result = gadgets(index).name + "=createProgressBar("+x+","+y+","+width+","+height+","+parent+")"
endfunction result

function exportWriteTrackBarDB(index,x as string,y as string,width as string,height as string, parent as string)
   local result as string
   local style as string
   style=str$(gadgets(index).style)
   result = gadgets(index).name + "=createTrackBar("+x+","+y+","+width+","+height+","+style+","+parent+")"
endfunction result

function exportWriteMenuGlobalsDB(fileNum)
	
	local nextItemText as string
	
	write string fileNum,""
	write string fileNum,"`Menu Gloals"
	write string fileNum,"`-----------"
	
	nextItem=getTreeViewChild(menuTree,tvMenuTreeRoot)
	
	if nextItem
		write string fileNum,SPACETAB+"global menu"
		
		`Add an entry for each item in the menu tree which has children
		while nextItem <> 0
			nextItemText=getTreeViewItemText(menuTree,nextItem)
		
			if nextItemText <> "[Splitter]"
				if getTreeViewChild(menuTree,nextItem) then write string fileNum,SPACETAB
				write string fileNum,SPACETAB+"#"+"constant "+generateMenuConstant(nextItemText)+" "+str$(identifier)
			endif	
		
			if (getTreeViewChild(menuTree,nextItem))
				
				write string filenum,SPACETAB+"global "+generateMenuName(nextItemText)
				`parentMenu=generateMenuName(nextItemText)
				nextItem=getTreeViewChild(menuTree,nextItem)
			else
				siblingItem=getTreeViewNext(menuTree,nextItem)
				if siblingItem
					nextItem=siblingItem
				else
				`	parentSibling=getTreeViewNext(menuTree,getTreeViewParent(menuTree,nextItem))
					
					temp=nextItem
					
					repeat
 	 			    		temp=getTreeViewParent(menuTree,temp)
      					parentSibling=getTreeViewNext(menuTree,temp)
					until (parentSibling <> 0) or temp=0
						
					if parentSibling
					`	parentMenu=generateMenuName(getTreeViewItemText(menuTree,getTreeViewParent(menuTree,parentSibling)))
					
						nextItem=parentSibling
						write string fileNum,SPACETAB
						
					else
						nextItem=0
					endif
				endif
			endif
		
			inc identifier
		endwhile
	endif
	
endfunction

function exportWriteMenuDB(fileNum)
	
	local parentMenu as string
	local nextItemText as string
	local identifier
	
	`Write parent menu creation
	write string fileNum,"menu=createMenu(0)"
	
	nextItem = getTreeViewChild(menuTree,tvMenuTreeRoot)
	
	parentMenu="menu"
	
	while nextItem <> 0
		nextItemText=getTreeViewItemText(menuTree,nextItem)
		
		if nextItemText="[Splitter]"
			write string fileNum,SPACETAB+"addMenuSplitter "+parentMenu
		else
			write string fileNum,SPACETAB+"addMenuItem "+parentMenu+","+quote(nextItemText)+","+str$(identifier)
		endif	
		
		if (getTreeViewChild(menuTree,nextItem))
			write string fileNum,SPACETAB
			write string filenum,SPACETAB+generateMenuName(nextItemText)+"=createSubMenu("+parentMenu+","+str$(identifier)+")"
			parentMenu=generateMenuName(nextItemText)
			nextItem=getTreeViewChild(menuTree,nextItem)
		else
			siblingItem=getTreeViewNext(menuTree,nextItem)
			if siblingItem
				nextItem=siblingItem
			else
				`parentSibling=getTreeViewNext(menuTree,getTreeViewParent(menuTree,nextItem))
				
				temp=nextItem

   				repeat
 	 			    temp=getTreeViewParent(menuTree,temp)
      				parentSibling=getTreeViewNext(menuTree,temp)
   				until (parentSibling <> 0) or temp=0
				
				if parentSibling
					parentMenu=generateMenuName(getTreeViewItemText(menuTree,getTreeViewParent(menuTree,parentSibling)))
				
					nextItem=parentSibling
					write string fileNum,SPACETAB
					write string fileNum,SPACETAB
				else
					nextItem=0
				endif
			endif
		endif
		
		inc identifier
	endwhile
	
endfunction

`Generates a constant name from a menu item's caption:
`eg: "Build Level" > "MENU_BUILDLEVEL"
function generateMenuConstant(sourceName as string)
	local result as string
	
	result="MENU_"
	
	local strlen
	strLen=len(sourceName)
	
	for i=1 to strLen
		temp$=mid$(sourceName,i)
		
		charKind=charType(temp$)
		
		if (charKind >=1) and (charKind <= 3)
			result=result+upper$(temp$)
		endif
	next i
	
endfunction result

`Generates a menu name from a menu item's caption.
`This is of the form menu[Caption], where caption excludes any non-alphanumerical characters
`eg:  "Build Level" > "menuBuildLevel"
function generateMenuName(sourceName as string)
	local result as string
	
	result="menu"
	
	if sourceName="[Menu Root]" then exitfunction result
	
	local strLen
	strLen=len(sourceName)
	
	for i=1 to strLen
		temp$=mid$(sourceName,i)
		
		charKind=charType(temp$)
		
		if (charKind >= 1) and (charKind <= 3)
			result=result+temp$
		endif
	next i
	
	
	
endfunction result

function quote(caption as string)
   local result as string
   result=QUOTE_CHAR+caption+QUOTE_CHAR
endfunction result
 

`Generates the appropriate addItem text the specified item
function exportItemsDB(fileNum)
	local result as string
	
	for index=0 to MAX_GADGETS 
		
		handle=gadgets(index).handle
	
		if handle
			select gadgets(index).gtype
				case GADGET_TABS
					count=tabCount(handle)
			
					for i=0 to count-1
						write string fileNum,SPACETAB+"addTab "+gadgets(index).name+","+QUOTE_CHAR+tabCaption(handle,i)+QUOTE_CHAR			
					next i
					
				endcase
				
				case GADGET_LIST,GADGET_COMBO
					count=itemCount(handle)
					
					for i=0 to count-1
						write string fileNum,SPACETAB+"addItem "+gadgets(index).name+","+QUOTE_CHAR+itemText(handle,i)+QUOTE_CHAR	
					next i
				endcase
			endselect
		endif
	next index
endfunction
 